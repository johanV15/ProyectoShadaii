// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ventas {
  id         Int     @id @default(autoincrement())
  fecha_venta DateTime
  detalle_Ventas detalle_ventas[]
  pagos pagos[]
  @@map("ventas")
}

model gastos {
  id          Int    @id @default(autoincrement())
  id_tipo     Int
  descripcion String
  fecha_gasto DateTime
  valor       Float     // `money` type is represented as `Float` in Prisma
  tipo_gasto  tipo_gasto @relation(fields: [id_tipo], references: [id])
  pedidos     pedidos[]
  @@map("gastos")
}

model productos {
  id           Int    @id @default(autoincrement())
  nombre       String    @db.VarChar(36)
  precio_venta Float     // `money` type is represented as `Float` in Prisma
  detalle_pedidos detalle_pedidos[]
  stock_productos stock_productos[]
  detalle_ventas detalle_ventas[]
  @@map("productos")
}

model clientes {
  id       Int    @id
  nombre   String    @db.VarChar(20)
  apellido String  @db.VarChar(20)
  detalle_ventas detalle_ventas[]
  pagos pagos[]
  @@map("clientes")
}

model pedidos {
  id       String    @id @db.VarChar(10)
  id_gasto Int
  gasto    gastos    @relation(fields: [id_gasto], references: [id])
  detalle_pedidos detalle_pedidos[]
  stock_productos stock_productos[]
  @@map("pedidos")
}

model detalle_pedidos {
  id                Int    @id @default(autoincrement())
  id_pedido         String    @db.VarChar(10)
  id_producto       Int
  cantidad_producto Int
  pedido            pedidos   @relation(fields: [id_pedido], references: [id])
  producto          productos @relation(fields: [id_producto], references: [id])
  @@map("detalle_pedidos")
}

model stock_productos {
  id                Int    @id @default(autoincrement())
  referencia_pedido String    @db.VarChar(10)
  id_producto       Int
  stock             Int
  fecha_vencimiento DateTime
  pedido            pedidos   @relation(fields: [referencia_pedido], references: [id])
  producto          productos @relation(fields: [id_producto], references: [id])
  @@map("stock_productos")
}

model detalle_ventas {
  id          Int    @id @default(autoincrement())
  id_venta    Int
  id_producto Int
  id_cliente  Int
  cantidad    Int
  subtotal    Float     // `money` type is represented as `Float` in Prisma
  venta       ventas    @relation(fields: [id_venta], references: [id])
  producto    productos @relation(fields: [id_producto], references: [id])
  cliente     clientes  @relation(fields: [id_cliente], references: [id])
  @@map("detalle_ventas")
}

model pagos {
  id         Int    @id @default(autoincrement())
  id_venta   Int
  id_cliente Int
  fecha_pago DateTime
  total_pago Float     // `money` type is represented as `Float` in Prisma
  pagado     Boolean
  venta      ventas    @relation(fields: [id_venta], references: [id])
  cliente    clientes  @relation(fields: [id_cliente], references: [id])
  @@map("pagos")
}

model tipo_gasto {
  id    Int    @id @default(autoincrement())
  nombre String   @db.VarChar(30)
  gastos gastos[]
  @@map("tipo_gasto")
}